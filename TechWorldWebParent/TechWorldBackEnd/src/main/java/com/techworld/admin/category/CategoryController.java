package com.techworld.admin.category;import com.cloudinary.Cloudinary;import com.cloudinary.utils.ObjectUtils;import com.techworld.admin.Message;import com.techworld.common.entity.Category;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import java.io.IOException;import java.util.List;import java.util.Map;@Controllerpublic class CategoryController {    @Autowired    CategoryService categoryService;    @Autowired    Cloudinary cloudinary;    @GetMapping("/categories")    public String listFirstPage(Model model){        List<Category> listCategories = categoryService.listAll();        model.addAttribute("listCategories", listCategories);        return "categories/categories";    }    @GetMapping("/categories/new")    public String newCategory(Model model){        Category category = new Category();        category.setEnabled(true);        model.addAttribute("pageTitle","Create New Category");        model.addAttribute("category",category);        return "categories/category_form";    }    @PostMapping("/categories/save")    public String saveCategory(Category category, @RequestParam("fileImage") MultipartFile multipartFile,                               RedirectAttributes redirectAttributes) throws IOException, CategoryNotFoundException {        if(!multipartFile.isEmpty()){            if(category.getId() != null && categoryService.get(category.getId()).getImage() != null){                categoryService.deleteImageInCloudinary(category);            }            try {                Map r = this.cloudinary.uploader().upload(multipartFile.getBytes(),                        ObjectUtils.asMap("resource_type","auto"));                String img = (String) r.get("secure_url");                category.setImage(img);                Category savedCategory = categoryService.save(category);            } catch (IOException e){                e.printStackTrace();            }        } else{            if (category.getId() == null || categoryService.get(category.getId()).getImage() == null){                category.setImage(null);            }            Category savedCategory = categoryService.save(category);        }        redirectAttributes.addFlashAttribute("message", new Message("success", "The user has been saved successfully."));        return "redirect:/categories";    }        @GetMapping("/categories/edit/{id}")    public String editCategory(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes){        try{            Category category = categoryService.get(id);            model.addAttribute("category",category);            model.addAttribute("pageTitle","Edit Category (ID: " + id + ")");            return "categories/category_form";        } catch (CategoryNotFoundException e) {            redirectAttributes.addFlashAttribute("message",new Message("error", e.getMessage()));            return "redirect:/categories";        }    }    @GetMapping("/categories/delete/{id}")    public String deleteCategory(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes){        try{            Category category = categoryService.get(id);            if(category.getImage() != null){                categoryService.deleteImageInCloudinary(category);            }            categoryService.delete(id);            redirectAttributes.addFlashAttribute("message",new Message("success","The category ID " + id + " has been deleted successfully"));        }catch (CategoryNotFoundException ex){            redirectAttributes.addFlashAttribute("message",new Message("error", ex.getMessage()));        } catch (IOException e) {            throw new RuntimeException(e);        }        return "redirect:/categories";    }    @GetMapping("/categories/export/csv")    public void exportToCSV(HttpServletResponse response) throws IOException{        List<Category> listCategories = categoryService.listAll();        CategoryCsvExporter exporter = new CategoryCsvExporter();        exporter.export(listCategories,response);    }}